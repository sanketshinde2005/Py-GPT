// src/app/page.tsx
"use client";

import { useState } from "react";
import styles from "./page.module.css";

export default function Home() {
  const [prompt, setPrompt] = useState("");
  const [result, setResult] = useState("");
  const [loading, setLoading] = useState(false);
  const [dark, setDark] = useState(false);
  const [copied, setCopied] = useState(false);

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    setLoading(true);
    setResult("");
    setCopied(false);
    try {
      const response = await fetch("http://localhost:5000/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });
      const data = await response.json();
      setResult(data.completion);
    } catch {
      setResult("❌ Error connecting to backend.");
    } finally {
      setLoading(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(result);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <main className={dark ? styles.dark : styles.light}>
      <div className={styles.container}>
        <header className={styles.header}>
          <h1>🧠 Py-GPT</h1>
          <button
            className={styles.toggleButton}
            onClick={() => setDark(!dark)}
          >
            {dark ? "☀️ Light Mode" : "🌙 Dark Mode"}
          </button>
        </header>

        <p className={styles.description}>
          Type a Python function signature and get full code generated by your
          own GPT model.
        </p>

        <textarea
          className={styles.textarea}
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g. def binary_search(arr, target):"
          rows={4}
        ></textarea>

        <div className={styles.controls}>
          <button
            className={styles.generateButton}
            onClick={handleGenerate}
            disabled={loading}
          >
            {loading ? "⏳ Generating..." : "⚙️ Generate Code"}
          </button>
        </div>

        {result && (
          <div className={styles.outputBox}>
            <pre className={styles.codeBlock}>{result}</pre>
            <button className={styles.copyButton} onClick={handleCopy}>
              {copied ? "✅ Copied" : "📋 Copy"}
            </button>
          </div>
        )}
      </div>
    </main>
  );
}
